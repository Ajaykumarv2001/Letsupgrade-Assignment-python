detect gestures using your desktop camera in Python
import cv2
import numpy as np

# Initialize the camera
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()

    # Flip the frame horizontally for a later selfie-view display
    frame = cv2.flip(frame, 1)

    # Region of Interest (ROI) for the hand
    roi = frame[100:300, 100:300]

    # Convert the ROI to grayscale
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to the grayscale image
    gray = cv2.GaussianBlur(gray, (5, 5), 0)

    # Threshold the image
    ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)

    # Find contours in the thresholded image
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if len(contours) > 0:
        # Find the contour with the largest area
        max_contour = max(contours, key=cv2.contourArea)

        # Draw the largest contour on the original frame
        cv2.drawContours(roi, [max_contour], -1, (0, 0, 255), 2)

        # Convex hull of the hand
        hull = cv2.convexHull(max_contour)

        # Draw the convex hull on the original frame
        cv2.drawContours(roi, [hull], -1, (0, 255, 0), 2)

        # Find the number of fingers raised
        hull = cv2.convexHull(max_contour, returnPoints=False)
        defects = cv2.convexityDefects(max_contour, hull)

        if defects is not None:
            finger_count = 0
            for i in range(defects.shape[0]):
                s, e, f, d = defects[i, 0]
                start = tuple(max_contour[s][0])
                end = tuple(max_contour[e][0]
                far = tuple(max_contour[f][0])

                if d > 10000:  # Adjust this threshold as needed
                    cv2.circle(roi, far, 5, [0, 0, 255], -1)
                    finger_count += 1

            cv2.putText(roi, str(finger_count), (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    cv2.imshow("Gesture Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()

